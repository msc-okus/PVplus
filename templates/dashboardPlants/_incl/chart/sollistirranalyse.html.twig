<style>
    .tg-ac   {border-collapse:collapse;border-spacing:0;width: 95%;}
    .tg-dc   {border-collapse:collapse;border-spacing:0;width: 95%;}
    .tg td{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:12px;
        overflow:hidden;padding:5px 5px;word-break:normal;}
    .tg th{border-color:black;border-style:solid;border-width:1px;font-family:Arial, sans-serif;font-size:12px;
        font-weight:normal;overflow:hidden;padding:5px 5px;word-break:normal;}
    .tg .tg-glna{background-color:#fffe65;text-align:left;vertical-align:top}
    .tg .tg-vj3a{background-color:#e4cedd;border-color:#000000;text-align:left;vertical-align:top}
    .tg .tg-0lax{text-align:left;vertical-align:top}
    .tg .tg-0qe0{background-color:#ecf4ff;text-align:left;vertical-align:top}
    .tg .tg-fd62{background-color:#32cb00;text-align:left;vertical-align:top}
    .tg .tg-r50r{background-color:#cb0000;text-align:left;vertical-align:top}
</style>
<div class="grid-x tb-inchart-0">
<div class="cell small-6">
<table class="tg tg-dc">
    {% for data in content.tabel %}
    <thead>
    <tr>
        <th class="tg-vj3a" rowspan="2">DC&nbsp;<&nbsp;{{ data.Label }}&nbsp;W/m²</th>
        <th class="tg-0lax">DC higher than</th>
        <th class="tg-0lax">DC between</th>
        <th class="tg-0lax">DC lower than</th>
        <th class="tg-0lax" rowspan="2">total</th>
    </tr>
    <tr>
        <th class="tg-0lax">95 %</th>
        <th class="tg-0lax">80 % - 95 %</th>
        <th class="tg-0lax">80 %</th>
    </tr>
    </thead>
    <tbody>
        <tr>
            <td class="tg-0lax">[kWh]</td>
            <td class="tg-0lax">{{ data.DCsum100|number_format(0, ',', '.')  }}</td>
            <td class="tg-0lax">{{ data.DCsum95|number_format(0, ',', '.')  }}</td>
            <td class="tg-0lax">{{ data.DCsum90|number_format(0, ',', '.')  }}</td>
            <td class="tg-0lax">{{ data.DCsum|number_format(0, ',', '.')  }}</td>
        </tr>
        <tr>
            <td class="tg-0qe0">[%]</td>
            <td class="tg-fd62">{{ data.DCp100 }}</td>
            <td class="tg-glna">{{ data.DCp95 }}</td>
            <td class="tg-r50r">{{ data.DCp90 }}</td>
            <td class="tg-0qe0">100</td>
        </tr>
    {% endfor %}
    </tbody>
</table>
</div>
<div class="cell small-6">
    <table class="tg tg-ac">
        {% for data in content.tabel %}
        <thead>
        <tr>
            <th class="tg-vj3a" rowspan="2">AC&nbsp;<&nbsp;{{ data.Label }}&nbsp;W/m²</th>
            <th class="tg-0lax">AC higher than</th>
            <th class="tg-0lax">AC between</th>
            <th class="tg-0lax">AC lower than</th>
            <th class="tg-0lax" rowspan="2">total</th>
        </tr>
        <tr>
            <th class="tg-0lax">95 %</th>
            <th class="tg-0lax">80 % - 95 %</th>
            <th class="tg-0lax">80 %</th>
        </tr>
        </thead>
        <tbody>
            <tr>
                <td class="tg-0lax">[kWh]</td>
                <td class="tg-0lax">{{ data.ACsum100|number_format(0, ',', '.')  }}</td>
                <td class="tg-0lax">{{ data.ACsum95|number_format(0, ',', '.')  }}</td>
                <td class="tg-0lax">{{ data.ACsum90|number_format(0, ',', '.')  }}</td>
                <td class="tg-0lax">{{ data.ACsum|number_format(0, ',', '.')  }}</td>
            </tr>
            <tr>
                <td class="tg-0qe0">[%]</td>
                <td class="tg-fd62">{{ data.ACp100 }}</td>
                <td class="tg-glna">{{ data.ACp95 }}</td>
                <td class="tg-r50r">{{ data.ACp90 }}</td>
                <td class="tg-0qe0">100</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>
 </div>
</div>
<script>
        am4core.ready(function() {
        // Create chart instance for Left and Right box
        let chartleft = am4core.create("amchart-holder-left", am4charts.XYChart);
        let chartright = am4core.create("amchart-holder-right", am4charts.XYChart);
            // Build the Chart
            chartleft.data = {{ content.data|raw }};
            chartleft.preloader.disabled = false;
            chartleft.preloader.transitionDuration = 0;
            chartleft.preloader.progress = 5;
            chartleft.numberFormatter.numberFormat = "#";
            // Build the Chart
            chartright.data = {{ content.data|raw }};
            chartright.preloader.disabled = false;
            chartright.preloader.transitionDuration = 0;
            chartright.preloader.progress = 5;
            chartright.numberFormatter.numberFormat = "#";
            // Title Right
            let titleright = chartright.titles.create();
            titleright.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            titleright.fontSize = 16;
            titleright.marginBottom = 30;
            // Subtitle Right
            let title2right = chartright.titles.create();
            title2right.text = "- actual power - expected power DC [[ % ]] -";
            title2right.dy = 50;
            title2right.fontSize = 12;
            title2right.marginBottom = 10;
            // Title Left
            let titleleft = chartleft.titles.create();
            titleleft.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            titleleft.fontSize = 16;
            titleleft.marginBottom = 30;
            // Subtitle Left
            let title2left = chartleft.titles.create();
            title2left.text = "- actual power - expected power AC [[ % ]] -";
            title2left.dy = 50;
            title2left.fontSize = 12;
            title2left.marginBottom = 10;
            // Create 2 Axes Left
            let irrAxisLeft = chartleft.xAxes.push(new am4charts.ValueAxis());
            let valueAxisLeft = chartleft.yAxes.push(new am4charts.ValueAxis());
            irrAxisLeft.title.text = "Incident irradiation W/m²";
            valueAxisLeft.title.text = "AC kWh";
            irrAxisLeft.markUnitChange = false // Disable Month Name
            irrAxisLeft.renderer.ticks.template.disabled = true;
            irrAxisLeft.renderer.axisFills.template.disabled = true;
            valueAxisLeft.renderer.ticks.template.disabled = true;
            valueAxisLeft.renderer.axisFills.template.disabled = true;
            irrAxisLeft.dataFields.category = "irr";
            valueAxisLeft.dataFields.category = "AC_kwh";
            irrAxisLeft.renderer.grid.template.disabled = true;
            valueAxisLeft.renderer.grid.template.disabled = true;
            valueAxisLeft.renderer.labels.template.fontSize = 12;
            irrAxisLeft.renderer.labels.template.fontSize = 12;
            // Create 2 Axes Right
            let irrAxisRight = chartright.xAxes.push(new am4charts.ValueAxis());
            let valueAxisRight = chartright.yAxes.push(new am4charts.ValueAxis());
            irrAxisRight.title.text = "Incident irradiation W/m²";
            valueAxisRight.title.text = "DC kWh";
            irrAxisRight.markUnitChange = false // Disable Month Name
            irrAxisRight.renderer.ticks.template.disabled = true;
            irrAxisRight.renderer.axisFills.template.disabled = true;
            valueAxisRight.renderer.ticks.template.disabled = true;
            valueAxisRight.renderer.axisFills.template.disabled = true;
            irrAxisRight.dataFields.category = "irr";
            valueAxisRight.dataFields.category = "DC_kwh";
            irrAxisRight.renderer.grid.template.disabled = true;
            valueAxisRight.renderer.grid.template.disabled = true;
            valueAxisRight.renderer.labels.template.fontSize = 12;
            irrAxisRight.renderer.labels.template.fontSize = 12;
         //  xAxis.renderer.minGridDistance = 5;
         //  yAxis.renderer.minGridDistance = 5;
         //  yAxis.renderer.labels.template.rotation = -45;
         //  xAxis.renderer.labels.template.horizontalCenter = "middle";
         //  xAxis.renderer.labels.template.verticalCenter = "right";
            // Create Series Left
            let seriesLeft = chartleft.series.push(new am4charts.LineSeries());
            seriesLeft.dataFields.valueX = "irr";
            seriesLeft.dataFields.valueY = "AC_kwh";
            seriesLeft.dataFields.value = "valueac";
            seriesLeft.strokeOpacity = 0;
            seriesLeft.sequencedInterpolation = true;
            // series.tooltip.pointerOrientation = "vertical";
            // Create Series Right
            let seriesRight = chartright.series.push(new am4charts.LineSeries());
            seriesRight.dataFields.valueX = "irr";
            seriesRight.dataFields.valueY = "DC_kwh";
            seriesRight.dataFields.value = "valuedc";
            seriesRight.strokeOpacity = 0;
            seriesRight.sequencedInterpolation = true;
            //series.tooltip.pointerOrientation = "vertical";
            let bulletLeft = seriesLeft.bullets.push(new am4core.Circle());
            bulletLeft.fill = am4core.color("#ff0000");
            bulletLeft.propertyFields.fill = "colorAC";
            bulletLeft.strokeOpacity = 0;
            bulletLeft.strokeWidth = 2;
            bulletLeft.fillOpacity = 0.5;
            bulletLeft.stroke = am4core.color("#ffffff");
            bulletLeft.hiddenState.properties.opacity = 0;
            bulletLeft.tooltipText = "percent: {value.value} %\nAC kWh: {valueY.value}";
            //
            let bulletRight = seriesRight.bullets.push(new am4core.Circle());
            bulletRight.fill = am4core.color("#ff0000");
            bulletRight.propertyFields.fill = "colorDC";
            bulletRight.strokeOpacity = 0;
            bulletRight.strokeWidth = 2;
            bulletRight.fillOpacity = 0.5;
            bulletRight.stroke = am4core.color("#ffffff");
            bulletRight.hiddenState.properties.opacity = 0;
            bulletRight.tooltipText = "percent: {value.value} %\nDC kWh: {valueY.value}";
            //
            let outlineLeft = chartleft.plotContainer.createChild(am4core.Circle);
            outlineLeft.fillOpacity = 0;
            outlineLeft.strokeOpacity = 0.8;
            outlineLeft.stroke = am4core.color("#ff0000");
            outlineLeft.strokeWidth = 2;
            outlineLeft.hide(0);
            //
            let outlineRight = chartright.plotContainer.createChild(am4core.Circle);
            outlineRight.fillOpacity = 0;
            outlineRight.strokeOpacity = 0.8;
            outlineRight.stroke = am4core.color("#ff0000");
            outlineRight.strokeWidth = 2;
            outlineRight.hide(0);
            //
            let blurFilterleft = new am4core.BlurFilter();
            let blurFilterright = new am4core.BlurFilter();
            outlineLeft.filters.push(blurFilterleft);
            outlineRight.filters.push(blurFilterright);
            //
            seriesLeft.heatRules.push({ target: bulletRight, min: 3, max: 3, property: "radius" });
            seriesRight.heatRules.push({ target: bulletLeft, min: 3, max: 3, property: "radius" });
            //
            chartleft.cursor = new am4charts.XYCursor();
            chartleft.cursor.behavior = "zoomXY";
            chartleft.cursor.snapToSeries = seriesLeft;
            chartleft.scrollbarX = new am4core.Scrollbar();
            chartleft.scrollbarX.visible = false;
            chartleft.scrollbarY = new am4core.Scrollbar();
            // Export Menue Left
            chartleft.exporting.menu = new am4core.ExportMenu();
            chartleft.exporting.menu.items[0].label = "Download";
            chartleft.exporting.formatOptions.getKey("json").disabled = true;
            chartleft.exporting.formatOptions.getKey("html").disabled = true;
            chartleft.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chartleft.exporting.formatOptions.getKey("print").disabled = true;
            chartleft.exporting.formatOptions.getKey("pdf").disabled = false;
            chartleft.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            //
            chartright.cursor = new am4charts.XYCursor();
            chartright.cursor.behavior = "zoomXY";
            chartright.cursor.snapToSeries = seriesRight;
            chartright.scrollbarX = new am4core.Scrollbar();
            chartright.scrollbarX.visible = false;
            chartright.scrollbarY = new am4core.Scrollbar();
            // Export Menue Right
            chartright.exporting.menu = new am4core.ExportMenu();
            chartright.exporting.menu.items[0].label = "Download";
            chartright.exporting.formatOptions.getKey("json").disabled = true;
            chartright.exporting.formatOptions.getKey("html").disabled = true;
            chartright.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chartright.exporting.formatOptions.getKey("print").disabled = true;
            chartright.exporting.formatOptions.getKey("pdf").disabled = false;
            chartright.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            // Create Legende Left
            var legendleft = new am4charts.Legend();
            legendleft.parent = chartleft.chartContainer;
            legendleft.itemContainers.template.togglable = false;
            legendleft.labels.template.Width = 10;
            legendleft.labels.template.truncate = true;
            legendleft.labels.template.fontSize = 10;
            legendleft.useDefaultMarker = true;
            // Create Legende Right
            var legendright = new am4charts.Legend();
            legendright.parent = chartright.chartContainer;
            legendright.itemContainers.template.togglable = false;
            legendright.labels.template.Width = 10;
            legendright.labels.template.truncate = true;
            legendright.labels.template.fontSize = 10;
            legendright.useDefaultMarker = true;
            // Create Round Maker
            var markerleft = legendleft.markers.template.children.getIndex(0);
            markerleft.cornerRadius(11, 11, 11, 11);
            markerleft.strokeWidth = 0;
            markerleft.strokeOpacity = 0;
            markerleft.stroke = am4core.color("#ccc");
            // Create Round Maker
            var markerright = legendright.markers.template.children.getIndex(0);
            markerright.cornerRadius(11, 11, 11, 11);
            markerright.strokeWidth = 0;
            markerright.strokeOpacity = 0;
            markerright.stroke = am4core.color("#ccc");
            // define Legende Left and Right
            legendleft.data = [{
                 "name": "Deviation between ",
                 "fill": am4core.color("#ffffff")
             },{
                 "name": "95% and 100 %",
                 "fill": am4core.color("#009900")
             },  {
                 "name": "80% and 95 %",
                 "fill": am4core.color("#ffff00")
             },{
                 "name": "0% and 80 %",
                 "fill": am4core.color("#ff0000")
             },{
                 "name": "missing data",
                 "fill": am4core.color("#000000")
             }];
            //
            legendright.data = [{
                "name": "Deviation between ",
                "fill": am4core.color("#ffffff")
            },{
                "name": "95% and 100 %",
                "fill": am4core.color("#009900")
            },  {
                "name": "80% and 95 %",
                "fill": am4core.color("#ffff00")
            },{
                "name": "0% and 80 %",
                "fill": am4core.color("#ff0000")
            },{
                "name": "missing data",
                "fill": am4core.color("#000000")
            }];
    });
    // end am4core.ready()
</script>