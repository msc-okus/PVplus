<script>
    am4core.ready(function() {
        // Create chart instance
        {% if form.optionDate < 14 %}
            am4core.useTheme(am4themes_animated);
        {% endif %}
        let chart = am4core.create("amchart-holder", am4charts.XYChart);
        chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

        let title = chart.titles.create();
        title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
        title.fontSize = 18;
        title.marginBottom = 30;

        chart.data = {{ content.data|raw }};
        chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
        chart.numberFormatter.intlLocales = "de-DE";
        chart.numberFormatter.numberFormat = {
            "style": "decimal",
            "minimumFractionDigits": 0
        };

        // Legend
        chart.legend = new am4charts.Legend();
        chart.legend.useDefaultMarker = false;

        // Create axes
        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.title.text = "[[kWh]]";

        let valueAxisIrr = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxisIrr.title.text = "Irradiation [[W/m²]]";
        valueAxisIrr.renderer.opposite = true;
        valueAxisIrr.renderer.ticks.template.disabled = true;
        valueAxisIrr.renderer.grid.template.disabled = true;
        valueAxisIrr.extraMax = 0.1;

        {% if form.selectedChart == 'ac_act_group' or form.selectedChart == 'dc_act_group' %}
            let valueAxisTemp = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxisTemp.title.text = "Inverter temperature [[°C]]";
            valueAxisTemp.renderer.opposite = true;
            valueAxisTemp.renderer.ticks.template.disabled = true;
            valueAxisTemp.renderer.grid.template.disabled = true;
            valueAxisTemp.extraMax = 0.1;
        {% endif %}

        // Create series
        let seriesExp = chart.series.push(new am4charts.LineSeries());
        seriesExp.name = "{{ content.series1.name }}";
        seriesExp.dataFields.dateX = "date";
        seriesExp.dataFields.valueY = "expected";
        seriesExp.tooltipText = "{{ content.series1.tooltipText }}: {valueY} [/]";
        seriesExp.stroke = am4core.color("#fdd400");
        seriesExp.fill = am4core.color("#fdd400");
        seriesExp.strokeWidth = 2;
        seriesExp.defaultState.transitionDuration = 300;
        seriesExp.tensionX = 0.8;
        seriesExp.connect = false;

        // Create series
        let units = JSON.parse('{{ content.inverterArray | raw  }}');
        function addSeries(seriesId) {
            // Create series Actual
            let series = new am4charts.LineSeries();
            let newSeriesId = seriesId + {{ content.offsetLegende }};
            series.dataFields.dateX = "date";
            series.dataFields.valueY = units[newSeriesId];
            series.name = units[newSeriesId];
            series.tooltipText = units[newSeriesId] + ": {valueY} [/]";
            series.strokeWidth = 1;
            series.defaultState.transitionDuration = 300;
            series.tensionX = 0.8;
            series.connect = false;
            series = chart.series.push(series);
        }

        for (let i = 1; i <= {{ content.maxSeries }}; i++) {
            addSeries(i);
        }

        let seriesIrr = chart.series.push(new am4charts.LineSeries());
        seriesIrr.name = "Irradiation"
        seriesIrr.dataFields.dateX = "date";
        seriesIrr.dataFields.valueY = "irradiation";
        seriesIrr.tooltipText = "Irradiation: {valueY} [/]";
        seriesIrr.stroke = am4core.color("#950101");
        seriesIrr.fill = am4core.color("#950101");
        seriesIrr.strokeWidth = 1;
        seriesIrr.defaultState.transitionDuration = 300;
        seriesIrr.tensionX = 0.8;
        seriesIrr.hidden = true;
        seriesIrr.yAxis = valueAxisIrr;
        seriesIrr.connect = false;

        {% if aktAnlage.showCosPhiDiag and form.selectedChart starts with 'ac'%}
            let valueAxisCosPhi = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxisCosPhi.title.text = "CosPhi";
            valueAxisCosPhi.renderer.opposite = true;
            valueAxisCosPhi.renderer.ticks.template.disabled = true;
            valueAxisCosPhi.renderer.grid.template.disabled = true;
            valueAxisCosPhi.extraMax = 0.1;

            let seriesCosPhi = chart.series.push(new am4charts.LineSeries());
            seriesCosPhi.name = "CosPhi"
            seriesCosPhi.dataFields.dateX = "date";
            seriesCosPhi.dataFields.valueY = "cosPhi";
            seriesCosPhi.tooltipText = "CosPhi: {valueY} [/]";
            seriesCosPhi.stroke = am4core.color("#000000");
            seriesCosPhi.fill = am4core.color("#000000");
            seriesCosPhi.strokeWidth = 1;
            seriesCosPhi.defaultState.transitionDuration = 300;
            seriesCosPhi.tensionX = 0.8;
            seriesCosPhi.hidden = true;
            seriesCosPhi.yAxis = valueAxisCosPhi;
            seriesCosPhi.connect = false;
        {% endif %}

        {% if ((form.selectedChart == 'ac_act_group' or form.selectedChart == 'dc_act_group')) %}
            // and false %}
            let seriesTemp = chart.series.push(new am4charts.LineSeries());
            seriesTemp.name = "InverterTemp"
            seriesTemp.dataFields.dateX = "date";
            seriesTemp.dataFields.valueY = "temperature";
            seriesTemp.tooltipText = "InverterTemp: {valueY} [/]";
            seriesTemp.stroke = am4core.color("#763345");
            seriesTemp.fill = am4core.color("#763345");
            seriesTemp.strokeWidth = 1;
            seriesTemp.defaultState.transitionDuration = 300;
            seriesTemp.tensionX = 0.8;
            seriesTemp.hidden = true;
            seriesTemp.yAxis = valueAxisTemp;
            seriesTemp.connect = false;
        {% endif %}

        chart.cursor = new am4charts.XYCursor();
        chart.cursor.xAxis = dateAxis;
        chart.exporting.menu = new am4core.ExportMenu();
        chart.scrollbarX = new am4core.Scrollbar();
        chart.scrollbarX.marginBottom = "20"
        chart.scrollbarY = new am4core.Scrollbar();
        chart.scrollbarY.marginLeft = "20";
        chart.exporting.menu.items[0].label = "Download";
        chart.exporting.formatOptions.getKey("json").disabled = true;
        chart.exporting.formatOptions.getKey("html").disabled = true;
        chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
        chart.exporting.formatOptions.getKey("print").disabled = true;
        chart.exporting.formatOptions.getKey("pdf").disabled = true;
        chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


    }); // end am4core.ready()
</script>