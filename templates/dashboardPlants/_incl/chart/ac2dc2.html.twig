<script>
    am4core.ready(function() {
        // Create chart instance
        {% if form.optionDate < 14 %}
            am4core.useTheme(am4themes_animated);
        {% endif %}
        let chart = am4core.create("amchart-holder", am4charts.XYChart);
        chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

        chart.data = {{ content.data|raw }};
        chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
        chart.numberFormatter.intlLocales = "de-DE";
        chart.numberFormatter.numberFormat = {
            "style": "decimal",
            "minimumFractionDigits": 0
        };

        // Legend
        chart.legend = new am4charts.Legend();
        chart.legend.useDefaultMarker = false;

        // Create axes
        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.title.text = "[[kWh]]";

        let valueAxisIrr = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxisIrr.title.text = "Irradiation [[W/mÂ²]]";
        valueAxisIrr.renderer.opposite = true;
        valueAxisIrr.renderer.ticks.template.disabled = true;
        valueAxisIrr.renderer.grid.template.disabled = true;
        valueAxisIrr.extraMax = 0.1;

        /*
        let valueAxis3 = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis3.title.text = "Panel temperature";
        valueAxis3.renderer.opposite = true;
        valueAxis3.renderer.ticks.template.disabled = true;
        valueAxis3.renderer.grid.template.disabled = true;
        valueAxis3.extraMax = 0.1;
        */
        // Create series
        let seriesExp = chart.series.push(new am4charts.LineSeries());
        seriesExp.name = "{{ content.series1.name }}";
        seriesExp.dataFields.dateX = "date";
        seriesExp.dataFields.valueY = "expected";
        seriesExp.tooltipText = "{{ content.series1.tooltipText }}: {valueY} [/]";
        seriesExp.stroke = am4core.color("#fdd400");
        seriesExp.fill = am4core.color("#fdd400");
        seriesExp.strokeWidth = 2;
        seriesExp.defaultState.transitionDuration = 300;
        seriesExp.tensionX = 0.8;

        // Create series
        let units = JSON.parse('{{ content.inverterArray | raw  }}');
        function addSeries(seriesId) {
            //let seriesId = (chart.series.length / 1) ;

            // Create series Actual
            let series = new am4charts.LineSeries();
            let newSeriesId = seriesId + {{ content.offsetLegende }};
            series.dataFields.dateX = "date";
            series.dataFields.valueY = units[newSeriesId];
            series.name = units[newSeriesId];
            series.tooltipText = units[newSeriesId] + ": {valueY} [/]";
            series.strokeWidth = 1;
            series.defaultState.transitionDuration = 300;
            series.tensionX = 0.8;
            series.connect = false;
            series = chart.series.push(series);
        }

        for (let i = 1; i <= {{ content.maxSeries }}; i++) {
            addSeries(i);
        }

        let seriesIrr = chart.series.push(new am4charts.LineSeries());
        seriesIrr.name = "Irradiation"
        seriesIrr.dataFields.dateX = "date";
        seriesIrr.dataFields.valueY = "irradiation";
        seriesIrr.tooltipText = "Irradiation: {valueY} [/]";
        seriesIrr.stroke = am4core.color("#950101");
        seriesIrr.strokeWidth = 1;
        seriesIrr.defaultState.transitionDuration = 300;
        seriesIrr.tensionX = 0.8;
        seriesIrr.hidden = true;
        seriesIrr.yAxis = valueAxisIrr;

        {% if aktAnlage.showCosPhiDiag %}
            let valueAxisCosPhi = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxisCosPhi.title.text = "CosPhi";
            valueAxisCosPhi.renderer.opposite = true;
            valueAxisCosPhi.renderer.ticks.template.disabled = true;
            valueAxisCosPhi.renderer.grid.template.disabled = true;
            valueAxisCosPhi.extraMax = 0.1;

            let seriesCosPhi = chart.series.push(new am4charts.LineSeries());
            seriesCosPhi.name = "CosPhi"
            seriesCosPhi.dataFields.dateX = "date";
            seriesCosPhi.dataFields.valueY = "cosPhi";
            seriesCosPhi.tooltipText = "CosPhi: {valueY} [/]";
            seriesCosPhi.stroke = am4core.color("rgba(0,0,0,0.68)");
            seriesCosPhi.strokeWidth = 1;
            seriesCosPhi.defaultState.transitionDuration = 300;
            seriesCosPhi.tensionX = 0.8;
            seriesCosPhi.hidden = true;
            seriesCosPhi.yAxis = valueAxisCosPhi;
        {% endif %}
        /*
        let series110 = chart.series.push(new am4charts.LineSeries());
        series110.name = "panelTemp"
        series110.dataFields.dateX = "date";
        series110.dataFields.valueY = "panelTemp";
        series110.tooltipText = "Panel temperature: {valueY} [/]";
        series110.stroke = am4core.color("rgba(118,51,69,0.68)");
        series110.strokeWidth = 1;
        series110.defaultState.transitionDuration = 300;
        series110.tensionX = 0.8;
        series110.hidden = true;
        series110.gr
        series110.yAxis = valueAxis3;
        */

        chart.cursor = new am4charts.XYCursor();
        chart.cursor.xAxis = dateAxis;
        chart.exporting.menu = new am4core.ExportMenu();
        chart.scrollbarX = new am4core.Scrollbar();
        chart.scrollbarX.marginBottom = "20"
        chart.scrollbarY = new am4core.Scrollbar();
        chart.scrollbarY.marginLeft = "20";
        chart.exporting.menu.items[0].label = "Download";

    }); // end am4core.ready()
</script>