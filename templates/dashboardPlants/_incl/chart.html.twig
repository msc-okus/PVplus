{% from "dashboardPlants/_incl/macrosStatus.html.twig" import statusTable as statusTable %}
{% from "dashboardPlants/_incl/macrosStatus.html.twig" import pvSystTable as pvSystTable %}
{% from "dashboardPlants/_incl/macrosStatus.html.twig" import gridTable as gridTable %}

{% if form.selectedChart != 'status_log' and form.selectedChart != 'availability' and form.selectedChart != 'pvsyst' and form.selectedChart != 'grid'
and form.selectedChart != 'sollistirranalyse'%}
    <div id="amchart-holder"></div>
{% endif %}

{% if form.selectedChart == 'sollistirranalyse' %}
    <div id="amchart-holder-left"></div>
    <div id="amchart-holder-right"></div>
{% endif %}

{% if form.selectedChart == 'ac_single' %}
    {# AC1 #}
    {% include 'dashboardPlants/_incl/chart/ac1dc1.html.twig' %}

{% elseif form.selectedChart == 'ac_act_overview' %}
    {# AC2 #}
    {% include 'dashboardPlants/_incl/chart/ac2dc2.html.twig' %}

{% elseif form.selectedChart == 'ac_act_group' %}
    {# AC3 #}
    {% include 'dashboardPlants/_incl/chart/ac2dc2.html.twig' %}

{% elseif form.selectedChart == 'ac_grp_power_diff' %}
    <!-- Balkendiagramme Group Power Diff -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create series
            let xAxes1 = chart.xAxes.push(new am4charts.CategoryAxis());
            xAxes1.dataFields.category = "category";
            xAxes1.renderer.grid.template.location = 0;
            xAxes1.renderer.labels.template.rotation = 270;
            xAxes1.renderer.labels.template.dx = -20; // horizontal Offset
            xAxes1.renderer.minGridDistance = 20;
            xAxes1.renderer.labels.template.html = "<a class='chart-label' href='?selectedChart=dc_inv_power_diff&selectedGroup={link}&from={{ form.from|url_encode }}&to={{ form.to|url_encode }}'>{category}</a>";

            let yAxes1 = chart.yAxes.push(new am4charts.ValueAxis());
            yAxes1.renderer.maxLabelPosition = 0.98;

            let series1 = chart.series.push(new am4charts.ColumnSeries());
            series1.name = "Expected";
            series1.columns.template.strokeOpacity = 0;
            series1.fill = "#fdd400";

            // Set up tooltips
            series1.tooltip.label.interactionsEnabled = false;
            series1.tooltip.keepTargetHover = true;
            {% if aktAnlage.anlType != 'ZWR' %} // Wenn kein ZentralWechselRichter vorliegt wird der Lnk erzeugt
                series1.columns.template.tooltipHTML = "<a href='?selectedChart=dc_inv_power_diff&selectedGroup={link}&from={{ form.from|url_encode }}&to={{ form.to|url_encode }}'><b>{category}:</b><br>Expected {valueY} [KWh]</a>";
            {% else %}
                series1.columns.template.tooltipHTML = "<b>{category}:</b><br>Expected {valueY} [KWh]";
            {% endif %}
            series1.tooltip.dy = 50;
            series1.dataFields.valueY = "exp";
            series1.dataFields.categoryX = "category";
            series1.sequencedInterpolationDelay = 100;

            let series2 = chart.series.push(new am4charts.ColumnSeries());
            series2.name = "Actual";
            series2.columns.template.strokeOpacity = 0;
            series2.dataFields.valueY = "act";
            series2.dataFields.categoryX = "category";
            series2.sequencedInterpolationDelay = 50;

            // Set up tooltips
            series2.tooltip.label.interactionsEnabled = false;
            series2.tooltip.keepTargetHover = true;
            {% if aktAnlage.anlType != 'ZWR' %}
                series2.columns.template.tooltipHTML = "<a href='?selectedChart=dc_inv_power_diff&selectedGroup={link}&from={{ form.from|url_encode }}&to={{ form.to|url_encode }}'><b>{category}:</b><br>Actual {valueY} [KWh]</a>";
            {% else %}
                series2.columns.template.tooltipHTML = "<b>{category}:</b><br>Actual {valueY} [KWh]";
            {% endif %}
            series2.tooltip.dy = -100;
            chart.scrollbarX = new am4core.Scrollbar();
            chart.cursor = new am4charts.XYCursor();
            chart.cursor.behavior = "zoomX";
            chart.exporting.menu = new am4core.ExportMenu();
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            ;
            
            chart.events.on("ready", function(ev) {
                //yAxes1.min = 0; //yAxes1.minZoomed;
                //yAxes1.max = yAxes1.maxZoomed;
            });

        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'ac_act_voltage' %}
    {# AC5 - Liniendiagramm Group Voltage#}
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
            am4core.useTheme(am4themes_animated);
            {% endif %}
            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());


            // Create series
            let series1 = chart.series.push(new am4charts.LineSeries());
            series1.name = "{{ content.series1.name }}";
            series1.dataFields.dateX = "date";
            series1.dataFields.valueY = "u_ac_phase1";
            series1.tooltipText = "{{ content.series1.tooltipText }}: {valueY} [V]";
            series1.stroke = am4core.color("#057a07");
            series1.fill = am4core.color("#057a07");
            series1.strokeWidth = 1;
            series1.defaultState.transitionDuration = 300;
            series1.tensionX = 0.8;
            series1.connect = false;

            let series2 = chart.series.push(new am4charts.LineSeries());
            series2.name = "{{ content.series2.name }}";
            series2.dataFields.dateX = "date";
            series2.dataFields.valueY = "u_ac_phase2";
            series2.tooltipText = "{{ content.series2.tooltipText }}: {valueY} [V]";
            series2.stroke = am4core.color("#d6a9e0");
            series2.fill = am4core.color("#d6a9e0");
            series2.strokeWidth = 1;
            series2.defaultState.transitionDuration = 300;
            series2.tensionX = 0.8;
            series2.connect = false;

            let series3 = chart.series.push(new am4charts.LineSeries());
            series3.name = "{{ content.series3.name }}";
            series3.dataFields.dateX = "date";
            series3.dataFields.valueY = "u_ac_phase3";
            series3.tooltipText = "{{ content.series3.tooltipText }}: {valueY} [V]";
            series3.stroke = am4core.color("#a97335");
            series3.fill = am4core.color("#a97335");
            series3.strokeWidth = 1;
            series3.defaultState.transitionDuration = 300;
            series3.tensionX = 0.8;
            series3.connect = false;

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'ac_act_current' %}
    {# AC6 - Liniendiagramm Group Voltage #}
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
            am4core.useTheme(am4themes_animated);
            {% endif %}
            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            let series0 = chart.series.push(new am4charts.LineSeries());
            series0.name = "{{ content.series0.name }}";
            series0.dataFields.dateX = "date";
            series0.dataFields.valueY = "i_ac_sum";
            series0.tooltipText = "{{ content.series0.tooltipText }}: {valueY} Ampere";
            series0.stroke = am4core.color("#016195");
            series0.fill = am4core.color("#016195");
            series0.strokeWidth = 1;
            series0.defaultState.transitionDuration = 300;
            series0.tensionX = 0.8;

            let series1 = chart.series.push(new am4charts.LineSeries());
            series1.name = "{{ content.series1.name }}";
            series1.dataFields.dateX = "date";
            series1.dataFields.valueY = "i_ac_phase1";
            series1.tooltipText = "{{ content.series1.tooltipText }}: {valueY} Ampere";
            series1.stroke = am4core.color("#057a07");
            series1.fill = am4core.color("#057a07");
            series1.strokeWidth = 1;
            series1.defaultState.transitionDuration = 300;
            series1.tensionX = 0.8;

            let series2 = chart.series.push(new am4charts.LineSeries());
            series2.name = "{{ content.series2.name }}";
            series2.dataFields.dateX = "date";
            series2.dataFields.valueY = "i_ac_phase2";
            series2.tooltipText = "{{ content.series2.tooltipText }}: {valueY} Ampere";
            series2.stroke = am4core.color("#d6a9e0");
            series2.fill = am4core.color("#d6a9e0");
            series2.strokeWidth = 1;
            series2.defaultState.transitionDuration = 300;
            series2.tensionX = 0.8;

            let series3 = chart.series.push(new am4charts.LineSeries());
            series3.name = "{{ content.series3.name }}";
            series3.dataFields.dateX = "date";
            series3.dataFields.valueY = "i_ac_phase3";
            series3.tooltipText = "{{ content.series3.tooltipText }}: {valueY} Ampere";
            series3.stroke = am4core.color("#a97335");
            series3.fill = am4core.color("#a97335");
            series3.strokeWidth = 1;
            series3.defaultState.transitionDuration = 300;
            series3.tensionX = 0.8;

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'ac_act_frequency' %}
    {# AC7 - Liniendiagramm Group Frequency #}
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
            am4core.useTheme(am4themes_animated);
            {% endif %}
            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            let series0 = chart.series.push(new am4charts.LineSeries());
            series0.name = "{{ content.series1.name }}";
            series0.dataFields.dateX = "date";
            series0.dataFields.valueY = "frequency";
            series0.tooltipText = "{{ content.series1.tooltipText }}: {valueY} Hertz";
            series0.stroke = am4core.color("#016195");
            series0.fill = am4core.color("#016195");
            series0.strokeWidth = 2;
            series0.defaultState.transitionDuration = 300;
            series0.tensionX = 0.8;

            // Create series
            function addSeries() {
                let seriesId = (chart.series.length / 1) ;

                // Create series Actual
                let series = new am4charts.LineSeries();
                {% if (content.offsetLegende) %}
                    let newSeriesId = seriesId + {{ content.offsetLegende }};
                    series.name = "{{ content.seriesx.name }}" + newSeriesId ;
                {% else %}
                    series.name = "{{ content.seriesx.name }}" + seriesId;
                {% endif %}
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = "{{ content.seriesx.tooltipText }}" + seriesId + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series.connect = false;
                series = chart.series.push(series);
            }

            for (let i = 1; i <= {{ content.maxSeries }}; i++) {
                addSeries();
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20"
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'reactive_power' %}
    {# AC8 - Liniendiagramm Group reactive_power #}
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}
            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in

            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            let series0 = chart.series.push(new am4charts.LineSeries());
            series0.name = "{{ content.series1.name }}";
            series0.dataFields.dateX = "date";
            series0.dataFields.valueY = "reactive_power";
            series0.tooltipText = "{{ content.series1.tooltipText }}: {valueY} Reactive power";
            series0.stroke = am4core.color("#016195");
            series0.fill = am4core.color("#016195");
            series0.strokeWidth = 2;
            series0.defaultState.transitionDuration = 300;
            series0.tensionX = 0.8;

            // Create series
            function addSeries() {
                let seriesId = (chart.series.length / 1) ;

                // Create series Actual
                let series = new am4charts.LineSeries();
                {% if (content.offsetLegende) %}
                    let newSeriesId = seriesId + {{ content.offsetLegende }};
                    series.name = "{{ content.seriesx.name }}" + newSeriesId ;
                {% else %}
                    series.name = "{{ content.seriesx.name }}" + seriesId;
                {% endif %}
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = "{{ content.seriesx.tooltipText }}" + seriesId + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series.connect = false;
                series = chart.series.push(series);
            }

            for (let i = 1; i <= {{ content.maxSeries }}; i++) {
                addSeries();
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20"
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>

{% elseif form.selectedChart == 'dc_single' %}
    {# DC1 #}
    {% include 'dashboardPlants/_incl/chart/ac1dc1.html.twig' %}

{% elseif form.selectedChart == 'dc_act_group' %}
    {# DC2 #}
    {% include 'dashboardPlants/_incl/chart/ac2dc2.html.twig' %}

{% elseif form.selectedChart == 'dc_act_overview' %} {# benutzte dc_current_overview script #}
    {# DC3 #}
    {% include 'dashboardPlants/_incl/chart/ac2dc2.html.twig' %}

{% elseif form.selectedChart == 'dc_current_overview' %}
    {# Curr1 - Liniendiagramm DC (current overview) #}
    {% include 'dashboardPlants/_incl/chart/curr1.html.twig' %}

{% elseif form.selectedChart == 'dc_current_group' %}
    {# Curr2 - Liniendiagramm DC (current group) #}
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            function addSeries() {
                let seriesId = (chart.series.length / 1) + 1;

                // Create series Actual
                let series = new am4charts.LineSeries();
                series.name = "{{ content.seriesx.name }} " + seriesId;
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = "{{ content.seriesx.tooltipText }}" + seriesId + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.sequencedInterpolation = false;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series = chart.series.push(series);
            }

            for (let i = 1; i <= {{ content.maxSeries }}; i++) {
                addSeries();
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>

{% elseif form.selectedChart == 'dc_current_inverter' %}
    {# Curr3 - Liniendiagramm DC (current inverter) #}
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            {% if (is_granted('ROLE_G4N')) %}
                let valueAxisIrr = chart.yAxes.push(new am4charts.ValueAxis());
                valueAxisIrr.title.text = "Irradiation [[W/m²]]";
                valueAxisIrr.renderer.opposite = true;
                valueAxisIrr.renderer.ticks.template.disabled = true;
                valueAxisIrr.renderer.grid.template.disabled = true;
                valueAxisIrr.extraMax = 0.1;
            {% endif %}

            let series0 = chart.series.push(new am4charts.LineSeries());
            series0.name = "{{ content.series1.name }}";
            series0.dataFields.dateX = "date";
            series0.dataFields.valueY = "soll";
            series0.tooltipText = "{{ content.series1.tooltipText }}: {valueY} [/]";
            series0.stroke = am4core.color("#fdd400");
            series0.fill = am4core.color("#fdd400");
            series0.strokeWidth = 2;
            series0.sequencedInterpolation = false;
            series0.defaultState.transitionDuration = 300;
            series0.tensionX = 0.8;

            {% if (is_granted('ROLE_G4N')) %}
                let seriesIrr = chart.series.push(new am4charts.LineSeries());
                seriesIrr.name = "Irradiation W/m²"
                seriesIrr.dataFields.dateX = "date";
                seriesIrr.dataFields.valueY = "irradiation";
                seriesIrr.tooltipText = "Irradiation W/m²: {valueY} [/]";
                seriesIrr.stroke = am4core.color("#950101");
                seriesIrr.strokeWidth = 1;
                //series5Irr.defaultState.transitionDuration = 50;
                seriesIrr.tensionX = 0.8;
                seriesIrr.hidden = true;
                seriesIrr.yAxis = valueAxisIrr;
            {% endif %}



            // Create series
            let units = JSON.parse('{{ content.inverterArray | raw  }}');
            function addSeries(seriesId) {

                // Create series Actual
                let series = new am4charts.LineSeries();
                let newSeriesId = seriesId + {{ content.offsetLegende }};

                series.dataFields.valueY = units[newSeriesId];
                series.name = units[newSeriesId];
                series.tooltipText = units[newSeriesId] + ": {valueY} [/]";
                series.dataFields.dateX = "date";
                series.strokeWidth = 1;
                series.sequencedInterpolation = false;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series = chart.series.push(series);
            }

            for (let i = 1; i <= {{ content.maxSeries }}; i++) {
                addSeries(i);
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>

{% elseif form.selectedChart == 'dc_current_mpp' %}
    <!-- Liniendiagramm DC (current mpp) -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.rotation = 270;

            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            function addSeries() {
                let seriesId = (chart.series.length) + 1;

                // Create series Actual
                let series = new am4charts.LineSeries();
                series.name = "{{ content.seriesx.name }}" + seriesId;
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = "{{ content.seriesx.tooltipText }}" + seriesId + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.sequencedInterpolation = false;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series = chart.series.push(series);
            }

            for (let i = 1; i < {{ content.maxSeries }}; i++) {
                addSeries();
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'dc_voltage_groups' %}
    <!-- Liniendiagramm DC (voltage groups) -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.rotation = 270;
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            function addSeries() {
                let seriesId = (chart.series.length) + 1;

                // Create series Actual
                let series = new am4charts.LineSeries();
                series.name = "{{ content.seriesx.name }}" + seriesId;
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = "{{ content.seriesx.tooltipText }}" + seriesId + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.sequencedInterpolation = false;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series = chart.series.push(series);
            }

            for (let i = 1; i <= {{ content.maxSeries }}; i++) {
                addSeries();
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'dc_voltage_mpp' %}
    <!-- Liniendiagramm DC (voltage groups) -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            dateAxis.renderer.labels.template.rotation = 270;

            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            function addSeries() {
                let seriesId = (chart.series.length) + 1;

                // Create series Actual
                let series = new am4charts.LineSeries();
                series.name = "{{ content.seriesx.name }}" + seriesId;
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = "{{ content.seriesx.tooltipText }}" + seriesId + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.sequencedInterpolation = false;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series = chart.series.push(series);
            }

            for (let i = 1; i < {{ content.maxSeries }}; i++) {
                addSeries();
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'dc_grp_power_diff' %}
    <!-- Balkendiagramme Group Power Diff -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create series
            let xAxes1 = chart.xAxes.push(new am4charts.CategoryAxis());
            xAxes1.dataFields.category = "category";
            xAxes1.renderer.grid.template.location = 0;
            xAxes1.renderer.labels.template.rotation = 270;
            xAxes1.renderer.labels.template.dx = -20; // horizontal Offset
            xAxes1.renderer.labels.template.html = "<a class='chart-label' href='?selectedChart=dc_inv_power_diff&selectedGroup={link}&from={{ form.from|url_encode }}&to={{ form.to|url_encode }}'>{category}</a>";
            xAxes1.renderer.minGridDistance = 20;

            let yAxes1 = chart.yAxes.push(new am4charts.ValueAxis());
            yAxes1.renderer.maxLabelPosition = 0.98;

            let series1 = chart.series.push(new am4charts.ColumnSeries());
            series1.name = "Expected";
            series1.columns.template.strokeOpacity = 0;
            series1.fill = "#fdd400";

            // Set up tooltips
            series1.tooltip.label.interactionsEnabled = false;
            series1.tooltip.keepTargetHover = true;
            {% if aktAnlage.anlType != 'ZWR' %} // Wenn kein ZentralWechselRichter vorliegt wird der Link erzeugt
                series1.columns.template.tooltipHTML = "<a href='?selectedChart=dc_inv_power_diff&selectedGroup={link}&from={{ form.from|url_encode }}&to={{ form.to|url_encode }}'><b>{category}:</b><br>Expected {valueY} [KWh]</a>";
            {% else %}
                series1.columns.template.tooltipHTML = "<b>{category}:</b><br>Expected {valueY} [[KWh]]";
            {% endif %}
            series1.tooltip.dy = 50;
            series1.dataFields.valueY = "exp";
            series1.dataFields.categoryX = "category";
            series1.sequencedInterpolation = true;
            series1.sequencedInterpolationDelay = 50;

            let series2 = chart.series.push(new am4charts.ColumnSeries());
            series2.name = "Actual";
            series2.columns.template.strokeOpacity = 0;
            series2.dataFields.valueY = "act";
            series2.dataFields.categoryX = "category";
            series2.sequencedInterpolation = true;
            series2.sequencedInterpolationDelay = 50;

            // Set up tooltips
            series2.tooltip.label.interactionsEnabled = false;
            series2.tooltip.keepTargetHover = true;
            {% if aktAnlage.anlType != 'ZWR' %}
                series2.columns.template.tooltipHTML = "<a href='?selectedChart=dc_inv_power_diff&selectedGroup={link}&from={{ form.from|url_encode }}&to={{ form.to|url_encode }}'><b>{category}:</b><br>Actual {valueY} [KWh]</a>";
            {% else %}
                series2.columns.template.tooltipHTML = "<b>{category}:</b><br>Actual {valueY} [[KWh]]";
            {% endif %}
            series2.tooltip.dy = -50;

            chart.scrollbarX = new am4core.Scrollbar();
            chart.cursor = new am4charts.XYCursor();
            chart.cursor.behavior = "zoomX";
            chart.exporting.menu = new am4core.ExportMenu();
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


            chart.events.on("ready", function(ev) {
                yAxes1.min = 0; //yAxes1.minZoomed;
                yAxes1.max = yAxes1.maxZoomed;
            });
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'dc_inv_power_diff' %}
    <!-- Balkendiagramme 'Inverter Power Diff' aka 'Dc-Inverter' aka 'DC Inverter production' -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            //am4core.useTheme(am4themes_animated);

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Create series
            let xAxes1 = chart.xAxes.push(new am4charts.CategoryAxis());
            xAxes1.dataFields.category = "category";
            xAxes1.renderer.grid.template.location = 0;
            xAxes1.renderer.labels.template.rotation = 270;
            xAxes1.renderer.labels.template.dx = -20; // horizontal Offset
            xAxes1.renderer.minGridDistance = 20;

            let yAxes1 = chart.yAxes.push(new am4charts.ValueAxis());
            yAxes1.renderer.maxLabelPosition = 0.98;

            let range = yAxes1.axisRanges.create();
            range.value = {{ content.rangeValue }};
            //{{ content.rangeValue }};
            range.grid.stroke = am4core.color("#fdd400");
            range.grid.strokeWidth = 2;
            range.grid.strokeOpacity = 1;
            range.label.inside = true;
            range.grid.above = true;
            range.label.text = "Expected";

            let series1 = chart.series.push(new am4charts.ColumnSeries());
            series1.columns.template.strokeOpacity = 0;
            series1.columns.template.propertyFields.fill = "color";
            series1.columns.template.tooltipText = "{categoryX}: {valueY} [kWh]";
            series1.columns.template.tooltipPosition = "pointer";
            series1.dataFields.valueY = "val";
            series1.dataFields.categoryX = "category";
            series1.sequencedInterpolation = true;
            series1.sequencedInterpolationDelay = 50;

            chart.scrollbarX = new am4core.Scrollbar();
            chart.cursor = new am4charts.XYCursor();
            chart.cursor.behavior = "zoomX";

            chart.events.on("ready", function(ev) {
                yAxes1.min = 0; //yAxes1.minZoomed;
                yAxes1.max = yAxes1.maxZoomed;
            });
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif  form.selectedChart == 'temp' %}
    <!-- Liniendiagramm Temperature and Wind -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
            am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            let series1 = chart.series.push(new am4charts.LineSeries());
            series1.name = "{{ content.series1.name }}";
            series1.ttname = "{{ content.series1.tooltipText }}";
            series1.dataFields.dateX = "date";
            series1.dataFields.valueY = "tempAmbient";
            series1.tooltipText = "{ttname}: {valueY} [/]";
            series1.stroke = am4core.color("#fdd400");
            series1.fill = "#fdd400";
            series1.strokeWidth = 1;
            series1.sequencedInterpolation = true;
            series1.defaultState.transitionDuration = 300;
            series1.tensionX = 0.8;
            series1.connect = false;

            {% if aktAnlage.weatherStation.hasPannelTemp == true %}
            let series2 = chart.series.push(new am4charts.LineSeries());
                series2.name = "{{ content.series2.name }}";
                series2.ttname = "{{ content.series2.tooltipText }}";
                series2.dataFields.dateX = "date";
                series2.dataFields.valueY = "tempCellMeasuerd";
                series2.tooltipText = "{ttname}: {valueY} [/]";
                series2.stroke = am4core.color("#016195");
                series2.fill = "#016195";
                series2.strokeWidth = 1;
                series2.sequencedInterpolation = true;
                series2.defaultState.transitionDuration = 300;
                series2.tensionX = 0.8;
                series2.connect = false;
            {% endif %}

            {% if aktAnlage.useCustPRAlgorithm == 'Lelystad' %}
                let series3 = chart.series.push(new am4charts.LineSeries());
                series3.name = "{{ content.series3.name }}";
                series3.ttname = "{{ content.series3.tooltipText }}";
                series3.dataFields.dateX = "date";
                series3.dataFields.valueY = "tempCellCorr";
                series3.tooltipText = "{ttname}: {valueY} [/]";
                series3.stroke = am4core.color("#950193");
                series3.fill = "#950193";
                series3.strokeWidth = 1;
                series3.sequencedInterpolation = true;
                series3.defaultState.transitionDuration = 300;
                series3.tensionX = 0.8;
                series3.connect = false;
            {% endif %}

            let windSpeed = chart.series.push(new am4charts.LineSeries());
            windSpeed.name = "Wind Speed m/s";
            windSpeed.ttname = "Wind Speed m/s";
            windSpeed.dataFields.dateX = "date";
            windSpeed.dataFields.valueY = "windSpeed";
            windSpeed.tooltipText = "{ttname}: {valueY} [/]";
            windSpeed.stroke = am4core.color("#019524");
            windSpeed.fill = "#019524";
            windSpeed.strokeWidth = 1;
            windSpeed.sequencedInterpolation = true;
            windSpeed.defaultState.transitionDuration = 300;
            windSpeed.tensionX = 0.8;
            windSpeed.connect = false;


            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'irradiation' %}
    <!-- Liniendiagramm Irradiation and Temperature -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            let series1 = chart.series.push(new am4charts.LineSeries());
            series1.name = "{{ content.series1.name }}";
            series1.ttname = "{{ content.series1.tooltipText }}";
            series1.dataFields.dateX = "date";
            series1.dataFields.valueY = "val1";
            series1.tooltipText = "{ttname}: {valueY} [/]";
            series1.stroke = am4core.color("#fdd400");
            series1.fill = "#fdd400";
            series1.strokeWidth = 1;
            series1.sequencedInterpolation = true;
            series1.defaultState.transitionDuration = 300;
            series1.tensionX = 0.8;
            series1.connect = false;

            {% if aktAnlage.showOnlyUpperIrr == false %}
                let series2 = chart.series.push(new am4charts.LineSeries());
                series2.name = "{{ content.series2.name }}";
                series2.ttname = "{{ content.series2.tooltipText }}";
                series2.dataFields.dateX = "date";
                series2.dataFields.valueY = "val2";
                series2.tooltipText = "{ttname}: {valueY} [/]";
                series2.stroke = am4core.color("#016195");
                series2.fill = "#016195";
                series2.strokeWidth = 1;
                series2.sequencedInterpolation = true;
                series2.defaultState.transitionDuration = 300;
                series2.tensionX = 0.8;
                series2.connect = false;
            {% endif %}

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'irradiation_one'  %}
    <!-- Liniendiagramm Irradiation nur ein Wert (in der Regel der obere) -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };

            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            // Create series
            let series1 = chart.series.push(new am4charts.LineSeries());
            series1.name = "{{ content.series1.name }}";
            series1.ttname = "{{ content.series1.tooltipText }}";
            series1.dataFields.dateX = "date";
            series1.dataFields.valueY = "val1";
            series1.tooltipText = "{ttname}: {valueY} [/]";
            series1.stroke = am4core.color("#fdd400");
            series1.fill = "#fdd400";
            series1.strokeWidth = 1;
            series1.sequencedInterpolation = true;
            series1.defaultState.transitionDuration = 300;
            series1.tensionX = 0.8;
            series1.connect = false;

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'irradiation_plant' %}
    <!-- Liniendiagramm Irradiation - Werte aus der Anlage -->
    <script>
        am4core.ready(function() {
            // Create chart instance
            {% if form.optionDate < 14 %}
                am4core.useTheme(am4themes_animated);
            {% endif %}

            let chart = am4core.create("amchart-holder", am4charts.XYChart);
            //chart.hiddenState.properties.opacity = 0; // this creates initial fade-in
            chart.data = {{ content.data|raw }};
            chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
            chart.numberFormatter.intlLocales = "de-DE";
            chart.numberFormatter.numberFormat = {
                "style": "decimal",
                "minimumFractionDigits": 0
            };
            let title = chart.titles.create();
            title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";
            title.fontSize = 18;
            title.marginBottom = 30;
            // Legend
            chart.legend = new am4charts.Legend();
            chart.legend.useDefaultMarker = false;

            // Create axes
            let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
            let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());

            let nameX = JSON.parse('{{ content.nameX|raw}}');

            let series0 = chart.series.push(new am4charts.LineSeries());
            series0.name = "{{ content.series1.name }}";
            series0.dataFields.dateX = "date";
            series0.dataFields.valueY = "g4n";
            series0.tooltipText = "{{ content.series1.tooltipText }}: {valueY} [/]";
            series0.stroke = am4core.color("#fdd400");
            series0.fill = am4core.color("#fdd400");
            series0.strokeWidth = 2;
            series0.sequencedInterpolation = false;
            series0.defaultState.transitionDuration = 300;
            series0.tensionX = 0.8;
            series0.connect = false;

            // Create series
            function addSeries(seriesId) {
                // Create series Irradiation Plant
                let series = new am4charts.LineSeries();
                series.name = nameX[seriesId];
                series.dataFields.dateX = "date";
                series.dataFields.valueY = "val" + seriesId;
                series.tooltipText = nameX[seriesId] + ": {valueY} [/]";
                series.strokeWidth = 1;
                series.sequencedInterpolation = false;
                series.defaultState.transitionDuration = 300;
                series.tensionX = 0.8;
                series.connect = false;
                chart.series.push(series);
            }

            for (let i = 1; i <= {{ content.maxSeries }}; i++) {
                addSeries(i);
            }

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.xAxis = dateAxis;
            chart.exporting.menu = new am4core.ExportMenu();
            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.marginBottom = "20"
            chart.scrollbarY = new am4core.Scrollbar();
            chart.scrollbarY.marginLeft = "20";
            chart.exporting.menu.items[0].label = "Download";
            chart.exporting.formatOptions.getKey("json").disabled = true;
            chart.exporting.formatOptions.getKey("html").disabled = true;
            chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
            chart.exporting.formatOptions.getKey("print").disabled = true;
            chart.exporting.formatOptions.getKey("pdf").disabled = true;
            chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to {{ form.to|date("Y-m-d") }}{% endif %})";


        }); // end am4core.ready()
    </script>
{% elseif form.selectedChart == 'pr_and_av' %}
    <!-- Liniendiagramm Irradiation - Werte aus der Anlage -->
    {% include 'dashboardPlants/_incl/chart/PAandPR.html.twig' %}
{% elseif form.selectedChart == 'status_log' %}
    {{ statusTable(content.status) }}
{% elseif form.selectedChart == 'availability' %}
    <h3>{{ content.headline }} - {{ aktAnlage.anlName }}</h3>
    <h4>from: {{ form.from|date("Y-m-d") }}{% if form.optionDate != 1 %} to: {{ form.to|date("Y-m-d") }}{% endif %}</h4>
    {% include 'dashboardPlants/_incl/chart/availabillity.html.twig' %}
{% elseif form.selectedChart == 'pvsyst' %}
    {{ pvSystTable(content.pvSysts) }}
{% elseif form.selectedChart == 'grid' %}
    {{ gridTable(content.grid) }}
{% elseif form.selectedChart == 'forecast' %}
    {% include 'dashboardPlants/_incl/chart/forecast.html.twig' %}
{% elseif form.selectedChart == 'heatmap' %}
    {% include 'dashboardPlants/_incl/chart/heatmap.html.twig' %}
{% elseif form.selectedChart == 'tempheatmap' %}
    {% include 'dashboardPlants/_incl/chart/tempheatmap.html.twig' %}
{% elseif form.selectedChart == 'sollistheatmap' %}
    {% include 'dashboardPlants/_incl/chart/sollistheatmap.html.twig' %}
{% elseif form.selectedChart == 'sollistanalyse' %}
    {% include 'dashboardPlants/_incl/chart/sollistanalyse.html.twig' %}
{% elseif form.selectedChart == 'sollisttempanalyse' %}
    {% include 'dashboardPlants/_incl/chart/sollisttempanalyse.html.twig' %}
{% elseif form.selectedChart == 'ppcontrollerchart' %}
    {% include 'dashboardPlants/_incl/chart/Ppcontroller1.html.twig' %}
{% endif %}
