<script>
    am4core.ready(function() {
        // Enable Performance
        am4core.options.minPolylineStep = 5;
        // Enable queuing
        am4core.options.queue = true;
        am4core.options.onlyShowOnViewport = true;
        // Get the data
        var data = {{ content.data|raw }};
        // Create the Chart Instance
        let chart = am4core.create("amchart-holder", am4charts.XYChart);
        chart.dateFormatter.inputDateFormat = "yyyy-MM-dd HH:mm:ss";
        chart.numberFormatter.intlLocales = "de-DE";
        chart.numberFormatter.numberFormat = {
            "style": "decimal",
            "minimumFractionDigits": 0
        };
        // Title Chart
        let title = chart.titles.create();
        title.text = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }} to {{ form.to|date("Y-m-d") }})";
        title.fontSize = 18;
        title.marginBottom = 30;

        // Legend
        chart.legend = new am4charts.Legend();
        chart.legend.useDefaultMarker = false;

        // Create axes
        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());
        dateAxis.renderer.mingridDistance = 20;

        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.title.text = "[[A/Impp]]";

        // Create series
        function addSeries(xname,id) {
            var series = chart.series.push(new am4charts.LineSeries());
            //
            series.dataFields.dateX = "date";
            series.dataFields.valueY = "pnomdc";
            series.name = xname;

            let segment = series.segments.template;
            segment.interactionsEnabled = true;
            segment.showTooltipOn = true;

            let hoverState = segment.states.create("hover");
            hoverState.properties.strokeWidth = 3;

            let dimmed = segment.states.create("dimmed");
            dimmed.properties.stroke = am4core.color("#dadada");

            series.minBulletDistance = 10;
            series.tooltipText = "INV {name} : {valueY} A/Impp [/]";
            series.strokeWidth = 1;
            series.defaultState.transitionDuration = 0;
            series.tensionX = 0.8;

            series.data = data;
            series.events.on("beforedatavalidated", function(ev) {
                let source = ev.target.data;
                let data = [];
                for(let i = 0; i < source.length; i++) {
                    let row = source[i];
                    if (row.xinv == id) {
                        data.push(row);
                    }
                }
                ev.target.data = data;
            });

            return series;
        }

        let datax = {{ content.SeriesNameArray|raw }};

        for (let i = {{ content.minSeries|raw }}; i <= {{ content.maxSeries|raw }}; i++) {
            let xname = datax[i];
            addSeries(xname,xname);
        }

        // Export for series
        chart.exporting.menu = new am4core.ExportMenu();
        chart.exporting.menu.items[0].label = "Download";
        chart.exporting.filePrefix = "{{ content.headline }} - {{ aktAnlage.anlName }} ({{ form.from|date("Y-m-d") }} to {{ form.to|date("Y-m-d") }})";
        chart.exporting.adapter.add("data", function(data, target) {

        // Assemble data from many series
            var data = [];
            chart.series.each(function(series) {
                for(let i = 0; i < series.data.length; i++) {
                    series.data[i].name = series.name;
                    data.push(series.data[i]);
                }
            });
            return { data: data };
        });
        //
        chart.cursor = new am4charts.XYCursor();
        chart.cursor.xAxis = dateAxis;
        chart.scrollbarX = new am4core.Scrollbar();
        chart.scrollbarX.marginBottom = "20"
        chart.scrollbarY = new am4core.Scrollbar();
        chart.scrollbarY.marginLeft = "20";
        // chart.exporting.menu = new am4core.ExportMenu();
        // chart.exporting.menu.items[0].label = "Download";
        // chart.exporting.formatOptions.getKey("json").disabled = true;
        // chart.exporting.formatOptions.getKey("html").disabled = true;
        // chart.exporting.formatOptions.getKey("pdfdata").disabled = true;
        // chart.exporting.formatOptions.getKey("print").disabled = true;
        // chart.exporting.formatOptions.getKey("pdf").disabled = true;

        chart.legend.markers.template.states.create("dimmed").properties.opacity = 0.3;
        chart.legend.labels.template.states.create("dimmed").properties.opacity = 0.3;
        chart.legend.labels.template.truncate = true;

        chart.legend.itemContainers.template.events.on("over", function(event) {
            processOver(event.target.dataItem.dataContext);
        })

        chart.legend.itemContainers.template.events.on("out", function(event) {
            processOut(event.target.dataItem.dataContext);
        })

        chart.legend.labels.template.textDecoration = "none";
        chart.legend.valueLabels.template.textDecoration = "none";

        let as = chart.legend.labels.template.states.getKey("active");
        as.properties.textDecoration = "line-through";
        as.properties.fill = am4core.color("#000ll");

        let as2 = chart.legend.valueLabels.template.states.getKey("active");
        as2.properties.textDecoration = "line-through";
        as2.properties.fill = am4core.color("#000zu");

        function processOver(hoveredSeries) {
            hoveredSeries.toFront();
            hoveredSeries.segments.each(function(segment) {
                segment.setState("hover");
            })

            chart.series.each(function(series) {
                if (series != hoveredSeries) {
                    series.segments.each(function(segment) {
                        segment.setState("dimmed");
                    })
                }
            });
        }

        function processOut() {
            chart.series.each(function(series) {
                series.segments.each(function(segment) {
                    segment.setState("default");
                })
            });
        }
        // End Chart Instance
    });
</script>