security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    #enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider

    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    role_hierarchy:
        # G4N Roles (hierarchical, include all feature roles)
        ROLE_DEV: [ROLE_ADMIN]
        ROLE_ADMIN: [ROLE_G4N, ROLE_ALLOWED_TO_SWITCH, ROLE_API_FULL_USER]
        ROLE_G4N: [ROLE_OWNER_ADMIN, ROLE_AM, ROLE_BETA]
        # User and Owner Roles (hierarchical)
        ROLE_OWNER_ADMIN: [ROLE_OWNER_FULL, ROLE_OWNER_ADMIN]
        ROLE_OWNER_FULL: [ROLE_OWNER, ROLE_API_FULL_USER]
        ROLE_OWNER: [ROLE_API_USER]
        # API Roles (hierarchical)
        ROLE_API_FULL_USER: [ROLE_API_USER]
        ROLE_API_USER: []
        # Feature Roles (NOT hierarchical)
        ROLE_BETA: []
        ROLE_AM: []
        ROLE_ANALYSE: []

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator:
                - App\Security\LoginFormAuthenticator
                - App\Security\CreateTokenAuthenticator
                - App\Security\ApiTokenAuthenticator
            entry_point: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                target: app_login

            switch_user: true


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS} #, ips: [127.0.0.1, 116.202.252.113, 2a01:4f8:d0a:74ce::2, 2003:a:110f:f400:541d:51b9:68d9:1244, 128.204.133.182, 208.67.222.222, 84.152.231.253, 87.140.79.244] }
        - { path: ^/import/manuel, roles: PUBLIC_ACCESS }
        - { path: ^/import/cron, roles: PUBLIC_ACCESS, ips: [127.0.0.1, 116.202.252.113, 2a01:4f8:d0a:74ce::2, 2003:a:110f:f400:541d:51b9:68d9:1244, 128.204.133.182, 208.67.222.222, 84.152.231.253, 87.140.79.244]}
        - { path: ^/, roles: ROLE_USER }
        - { path: ^/, roles: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

